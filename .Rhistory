## 3  8  192
## 4 10  148
## 5 12   96
# complete("specdata", 30:25)
##   id nobs
## 1 30  932
## 2 29  711
## 3 28  475
## 4 27  338
## 5 26  586
## 6 25  463
# complete("specdata", 3)
##   id nobs
## 1  3  243
#############  Part III  #############
corr <- function(directory, threshold = 0) {
## directory is a character vector of length 1 indicating
## the location of the CSV files
## The function should return a vector of correlations
## for the monitors that meet the threshold requirement.
## threshold is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## return a numeric vector of correlations
## NOTE:  Do not round the result!
#cr <- corr("specdata", 150)
#head(cr)
## [1] -0.01895754 -0.14051254 -0.04389737 -0.06815956 -0.12350667 -0.07588814
#summary(cr)
##     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
## -0.17623 -0.03109  0.10021  0.13969  0.26849  0.76313
#cr <- corr("specdata", 5000)
#summary(cr)
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
##
#length(cr)
## [1] 0
#cr <- corr("specdata")
#summary(cr)
##     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
## -1.00000 -0.05282  0.10718  0.13684  0.27831  1.00000
#length(cr)
## [1] 323
vectorOfCorrelations <- vector(mode = "numeric", length = 0)
j <- 0
myFiles <- list.files(directory)
for (i in myFiles) {
#print(i)
tmpFileName <- file.path(directory, i, sep = "")
tmp <- read.csv(tmpFileName)
tmp <- tmp[complete.cases(tmp), ]
nTemp <- nrow(tmp)
if (nTemp > threshold) {
myCorValue <- cor(tmp$sulfate, tmp$nitrate)
j <- j + 1
#print(paste("File: ", j, tmpFileName, nTemp, myCorValue))
vectorOfCorrelations[j] <- myCorValue
}
}
myCorrResult <- vectorOfCorrelations
}
# cr <- corr("specdata")
# summary(cr)
##     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
## -1.00000 -0.05282  0.10718  0.13684  0.27831  1.00000
# length(cr)
## [1] 323
# cr <- corr("specdata", 150)
# head(cr)
## [1] -0.01895754 -0.14051254 -0.04389737 -0.06815956 -0.12350667 -0.07588814
# summary(cr)
##     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
## -0.17623 -0.03109  0.10021  0.13969  0.26849  0.76313
print(pollutantmean("specdata", "sulfate", 1:1))
print(pollutantmean("specdata", "sulfate", 1:10))
print(pollutantmean("specdata", "nitrate", 70:72))
print(pollutantmean("specdata", "nitrate", 23))
print(pollutantmean("specdata", "nitrate"))
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
pollutantmean("specdata", "sulfate", 1:10)
print(pollutantmean("specdata", "sulfate", 1:10))
?gl
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vector <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
class(iris)
colnames(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
colnames(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
library(datasets)
data(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
tapply(mtcars$hp,mtcars$cyl,mean)
setwd(C:\Users\james\OneDrive\Documents\GitHub)
setwd(C:\\Users\\james\\OneDrive\\Documents\\GitHub)
setwd("C:\\Users\\james\\OneDrive\\Documents\\GitHub")
getwd()
source("C:\\Users\\james\\OneDrive\\Documents\\GitHub"\\ProgrammingAssingment2\cachematrix.R")
source("C:\\Users\\james\\OneDrive\\Documents\\GitHub\\ProgrammingAssingment2\\cachematrix.R")
source("C:\\Users\\james\\OneDrive\\Documents\\GitHub\\ProgrammingAssingment2\\cachematrix.R")
file:///C:/Users/james/OneDrive/Documents/GitHub/ProgrammingAssignment2/cachematrix.R
pwd
getwd
getwd()
setwd("ProgrammingAssignment2")
getwd()
list.files
list.files()
source(cachematrix.R)
source("cachematrix.R")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector$set(1:5)
test<-makeVector$set(1:5)
test<-makeVector()
test$set(1:5)
class(test)
test$get()
makeVector(test2)
test$getmean()
cachemean(test)
cachemean(test)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- makeVector()
class(test)
test$set(1:5)
test$get()
cachemean(test)
cachemean(test)  #again
source('C:/Users/james/OneDrive/Documents/GitHub/ProgrammingAssignment2/Example-CachingVector.R')
source('C:/Users/james/OneDrive/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/james/OneDrive/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix(data = c(1,0,5,2,1,6,3,4,0),nrow = 3, ncol = 3)
solve(matrix(data = c(1,0,5,2,1,6,3,4,0),nrow = 3, ncol = 3))
source('C:/Users/james/OneDrive/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
## This is Programming Assignment 2
## makeCacheMatrix: This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
myInverse <- NULL
set <- function(y) {
x <<- y
myInverse <<- NULL
}
get <- function() x
setInverse <- function(solve) myInverse <<- solve
getInverse <- function() myInverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve: This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already been
## calculated (and the matrix has not changed), then the cachesolve should
## retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mInverse <- x$Inverse()
if(!is.null(mInverse)) {
message("getting cached data")
return(mInverse)
}
data <- x$get()
mInverse <- solve(data)
x$setInverse(mInverse)
mInverse
}
test <- makeCacheMatrix()
class(test)
test$set(matrix(data = c(1,0,5,2,1,6,3,4,0),nrow = 3, ncol = 3))
test$get()
cachemean(test)
cachemean(test)  #again
## This is Programming Assignment 2
## makeCacheMatrix: This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
myInverse <- NULL
set <- function(y) {
x <<- y
myInverse <<- NULL
}
get <- function() x
setInverse <- function(solve) myInverse <<- solve
getInverse <- function() myInverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve: This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already been
## calculated (and the matrix has not changed), then the cachesolve should
## retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mInverse <- x$Inverse()
if(!is.null(mInverse)) {
message("getting cached data")
return(mInverse)
}
data <- x$get()
mInverse <- solve(data)
x$setInverse(mInverse)
mInverse
}
test <- makeCacheMatrix()
class(test)
test$set(matrix(data = c(1,0,5,2,1,6,3,4,0),nrow = 3, ncol = 3))
test$get()
cacheSolve(test)
cacheSolve(test)  #again
cacheSolve()
cacheSolve(test)
## This is Programming Assignment 2
## makeCacheMatrix: This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
myInverse <- NULL
set <- function(y) {
x <<- y
myInverse <<- NULL
}
get <- function() x
setInverse <- function(solve) myInverse <<- solve
getInverse <- function() myInverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve: This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already been
## calculated (and the matrix has not changed), then the cachesolve should
## retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mInverse <- x$setInverse()
if(!is.null(mInverse)) {
message("getting cached data")
return(mInverse)
}
data <- x$get()
mInverse <- solve(data)
x$setInverse(mInverse)
mInverse
}
test <- makeCacheMatrix()
class(test)
test$set(matrix(data = c(1,0,5,2,1,6,3,4,0),nrow = 3, ncol = 3))
test$get()
cacheSolve(test)
cacheSolve(test)  #again
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- makeVector()
class(test)
test$set(1:5)
test$get()
cachemean(test)
cachemean(test)  #again
## This is Programming Assignment 2
## makeCacheMatrix: This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
myInverse <- NULL
set <- function(y) {
x <<- y
myInverse <<- NULL
}
get <- function() x
setInverse <- function(solve) myInverse <<- solve
getInverse <- function() myInverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve: This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already been
## calculated (and the matrix has not changed), then the cachesolve should
## retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mInverse <- x$getInverse()
if(!is.null(mInverse)) {
message("getting cached data")
return(mInverse)
}
data <- x$get()
mInverse <- solve(data)
x$setInverse(mInverse)
mInverse
}
test <- makeCacheMatrix()
class(test)
test$set(matrix(data = c(1,0,5,2,1,6,3,4,0),nrow = 3, ncol = 3))
test$get()
cacheSolve(test)
cacheSolve(test)  #again
## This is Programming Assignment 2
## makeCacheMatrix: This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
myInverse <- NULL
set <- function(y) {
x <<- y
myInverse <<- NULL
}
get <- function() x
setInverse <- function(solve) myInverse <<- solve
getInverse <- function() myInverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve: This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already been
## calculated (and the matrix has not changed), then the cachesolve should
## retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mInverse <- x$getInverse()
if(!is.null(mInverse)) {
message("getting cached data")
return(mInverse)
}
data <- x$get()
mInverse <- solve(data)
x$setInverse(mInverse)
mInverse
}
## test makeCacheMatrix
##
myTest <- function() {
test <- makeCacheMatrix()
class(test)
test$set(matrix(data = c(1,0,5,2,1,6,3,4,0),nrow = 3, ncol = 3))
test$get()
cacheSolve(test)
cacheSolve(test)  #again
}
# myTest()
myTest()
